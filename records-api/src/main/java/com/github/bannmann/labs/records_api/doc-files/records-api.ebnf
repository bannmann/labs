/* https://www.w3.org/TR/xml/#sec-notation */

insertInto ::=
(
    (
        'withIdentifiableConvertedVia'
        identifiablePojoInsert
        (
            'executeAndConvertVia'
            |
            'voidExecute'
        )
    )
    |
    (
        'withIdentifiableConvertedUsing'
        identifiablePojoInsert
        (
            'executeAndConvert'
            |
            'voidExecute'
        )
    )
    |
    (
        'withAnonymousConvertedVia'
        anonymousPojoInsert
        (
            'executeAndConvertVia'
            |
            'voidExecute'
        )
    )
    |
    (
        'withAnonymousConvertedUsing'
        anonymousPojoInsert
        (
            'executeAndConvert'
            |
            'voidExecute'
        )
    )
)

identifiablePojoInsert ::=
(
    (
        'fromPojo'
        (
            'generating'
            |
            adjustments
        )
        *
    )
    |
    (
        'fromPojoWithPresetId'

        (
            'generating'
            |
            adjustments
        )
        *

        'onDuplicateKeyIgnore'?
    )
)

anonymousPojoInsert ::=
(
    'fromPojo'

    (
        'generating'
        |
        adjustments
    )
    *

    'onDuplicateKeyIgnore'?
)

update ::=
(
    'withRecordConvertedVia'
    pojoUpdate
    (
        'executeAndConvertVia'
        |
        'voidExecute'
    )

    |

    'withRecordConvertedUsing'
    pojoUpdate
    (
        'executeAndConvert'
        |
        'voidExecute'
    )

    |

    'withPrimaryKey'
    sparseUpdate
    'voidExecute'
)

pojoUpdate ::=
(
    'fromNewPojo'

    (
        'andExistingPojo'
        (
            'predetectCollisionOn'
            |
            checks
        )
        *

        |

        checks
        *
    )
    ?

    (
        'postDetectCollisionIf'
        |
        adjustments
    )
    *
)

sparseUpdate ::=
(
    (
        'set' | 'increase' | 'refresh'
    )
    +

    'postDetectCollisionIf'
    *
)

adjustments ::= 'adjusting' | 'normalizingEmail'

checks ::=
(
    'verifyUnchanged'
    |
    'checkAndRandomize'
    |
    'checkAndIncrease'
    |
    'checkAndRefresh'
)


selectFrom ::=
(
    (
        'convertedVia' | 'convertedUsing'
    )

    (
        (
            (
                (
                    'read'
                    'filter'?
                )
                |
                'findWhere'
            )
            'fetchOptional'
        )
        |
        (
            'list'
            'filter'?
            'orderBy'?
            'fetchStream'
        )
    )
)

query ::=
(
    (
        (
            'convertedVia' | 'convertedUsing'
        )

        (
            'fetchOptional' | 'fetchStream'
        )
    )
    |
    (
        'skipConversion'

        (
            'fetchRecordOptional' | 'fetchRecordStream'
        )
    )
)
